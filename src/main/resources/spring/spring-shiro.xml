<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 组件扫描器 -->
    <context:component-scan base-package="com.zviolet.realm"/>

    <!-- 配置securityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 配置自定义Realm -->
        <!-- loginRealm 使用扫描器扫描注册成功了 -->
        <property name="realm" ref="loginRealm"/>
        <!-- <property name="sessionMode" value="native"/> -->
    </bean>

    <!-- shiro过滤器bean，id要和web.xml中filter-name一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>

        <!-- 登录页面，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <!-- <property name="loginUrl" value="/admin/show" /> -->

        <!-- filterChainDefinitions用于声明url和filter的关系，即ini配置中的[urls]部分 -->
        <property name="filterChainDefinitions">
            <value>

                # roles为角色授权拦截器，验证用户是否拥有角色
                /admin/** = authc, roles[admin]
                /techer/** = authc, roles[teacher]
                /student/** = authc, roles[student]

                # 当访问login时，不用进行认证
                /login = anon

                # logout为退出拦截器
                /logout = logout

                # anon为匿名拦截器，不需要登录即可访问，一般用在静态资源的过滤
                /css/** = anon
                /js/** = anon
                /images/** = anon
                /fonts/** = anon

                # 除了上面的 /login 可以匿名访问，其他路径都需要登录访问
                # authc是基于表单的拦截器。如果是下面的设置方式，没有登录会跳到相应的登录页面
                /** = authc
            </value>
        </property>
    </bean>

    <!-- 生命周期 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 启用shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>
